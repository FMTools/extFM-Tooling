/**
 */
package org.js.model.expression.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.js.model.expression.util.expressionAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class expressionItemProviderAdapterFactory extends expressionAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
   /**
    * This keeps track of the root adapter factory that delegates to this adapter factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ComposedAdapterFactory parentAdapterFactory;

   /**
    * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected IChangeNotifier changeNotifier = new ChangeNotifier();

   /**
    * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected Collection<Object> supportedTypes = new ArrayList<Object>();

   /**
    * This constructs an instance.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public expressionItemProviderAdapterFactory() {
      supportedTypes.add(IEditingDomainItemProvider.class);
      supportedTypes.add(IStructuredItemContentProvider.class);
      supportedTypes.add(ITreeItemContentProvider.class);
      supportedTypes.add(IItemLabelProvider.class);
      supportedTypes.add(IItemPropertySource.class);
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.FeatureModel2} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected FeatureModel2ItemProvider featureModel2ItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.FeatureModel2}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createFeatureModel2Adapter() {
      if (featureModel2ItemProvider == null) {
         featureModel2ItemProvider = new FeatureModel2ItemProvider(this);
      }

      return featureModel2ItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.Feature2} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected Feature2ItemProvider feature2ItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.Feature2}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createFeature2Adapter() {
      if (feature2ItemProvider == null) {
         feature2ItemProvider = new Feature2ItemProvider(this);
      }

      return feature2ItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.Group2} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected Group2ItemProvider group2ItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.Group2}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createGroup2Adapter() {
      if (group2ItemProvider == null) {
         group2ItemProvider = new Group2ItemProvider(this);
      }

      return group2ItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.Attribute2} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected Attribute2ItemProvider attribute2ItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.Attribute2}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createAttribute2Adapter() {
      if (attribute2ItemProvider == null) {
         attribute2ItemProvider = new Attribute2ItemProvider(this);
      }

      return attribute2ItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.DiscreteDomain2} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected DiscreteDomain2ItemProvider discreteDomain2ItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.DiscreteDomain2}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createDiscreteDomain2Adapter() {
      if (discreteDomain2ItemProvider == null) {
         discreteDomain2ItemProvider = new DiscreteDomain2ItemProvider(this);
      }

      return discreteDomain2ItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.ContinuousDomain2} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ContinuousDomain2ItemProvider continuousDomain2ItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.ContinuousDomain2}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createContinuousDomain2Adapter() {
      if (continuousDomain2ItemProvider == null) {
         continuousDomain2ItemProvider = new ContinuousDomain2ItemProvider(this);
      }

      return continuousDomain2ItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.Interval2} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected Interval2ItemProvider interval2ItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.Interval2}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createInterval2Adapter() {
      if (interval2ItemProvider == null) {
         interval2ItemProvider = new Interval2ItemProvider(this);
      }

      return interval2ItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.Constraint2} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected Constraint2ItemProvider constraint2ItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.Constraint2}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createConstraint2Adapter() {
      if (constraint2ItemProvider == null) {
         constraint2ItemProvider = new Constraint2ItemProvider(this);
      }

      return constraint2ItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.FeatureReference2} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected FeatureReference2ItemProvider featureReference2ItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.FeatureReference2}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createFeatureReference2Adapter() {
      if (featureReference2ItemProvider == null) {
         featureReference2ItemProvider = new FeatureReference2ItemProvider(this);
      }

      return featureReference2ItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.Requires} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected RequiresItemProvider requiresItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.Requires}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createRequiresAdapter() {
      if (requiresItemProvider == null) {
         requiresItemProvider = new RequiresItemProvider(this);
      }

      return requiresItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.Excludes} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ExcludesItemProvider excludesItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.Excludes}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createExcludesAdapter() {
      if (excludesItemProvider == null) {
         excludesItemProvider = new ExcludesItemProvider(this);
      }

      return excludesItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.Equal} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected EqualItemProvider equalItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.Equal}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createEqualAdapter() {
      if (equalItemProvider == null) {
         equalItemProvider = new EqualItemProvider(this);
      }

      return equalItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.Unequal} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected UnequalItemProvider unequalItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.Unequal}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createUnequalAdapter() {
      if (unequalItemProvider == null) {
         unequalItemProvider = new UnequalItemProvider(this);
      }

      return unequalItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.GreaterThan} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected GreaterThanItemProvider greaterThanItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.GreaterThan}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createGreaterThanAdapter() {
      if (greaterThanItemProvider == null) {
         greaterThanItemProvider = new GreaterThanItemProvider(this);
      }

      return greaterThanItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.GreaterThanOrEqual} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected GreaterThanOrEqualItemProvider greaterThanOrEqualItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.GreaterThanOrEqual}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createGreaterThanOrEqualAdapter() {
      if (greaterThanOrEqualItemProvider == null) {
         greaterThanOrEqualItemProvider = new GreaterThanOrEqualItemProvider(this);
      }

      return greaterThanOrEqualItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.LessThan} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected LessThanItemProvider lessThanItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.LessThan}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createLessThanAdapter() {
      if (lessThanItemProvider == null) {
         lessThanItemProvider = new LessThanItemProvider(this);
      }

      return lessThanItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.LessThanOrEqual} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected LessThanOrEqualItemProvider lessThanOrEqualItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.LessThanOrEqual}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createLessThanOrEqualAdapter() {
      if (lessThanOrEqualItemProvider == null) {
         lessThanOrEqualItemProvider = new LessThanOrEqualItemProvider(this);
      }

      return lessThanOrEqualItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.NestedExpression2} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected NestedExpression2ItemProvider nestedExpression2ItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.NestedExpression2}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createNestedExpression2Adapter() {
      if (nestedExpression2ItemProvider == null) {
         nestedExpression2ItemProvider = new NestedExpression2ItemProvider(this);
      }

      return nestedExpression2ItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.FeatureAttributeReference2} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected FeatureAttributeReference2ItemProvider featureAttributeReference2ItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.FeatureAttributeReference2}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createFeatureAttributeReference2Adapter() {
      if (featureAttributeReference2ItemProvider == null) {
         featureAttributeReference2ItemProvider = new FeatureAttributeReference2ItemProvider(this);
      }

      return featureAttributeReference2ItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.ExpressionModel} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ExpressionModelItemProvider expressionModelItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.ExpressionModel}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createExpressionModelAdapter() {
      if (expressionModelItemProvider == null) {
         expressionModelItemProvider = new ExpressionModelItemProvider(this);
      }

      return expressionModelItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.FeatureAttributeReference} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected FeatureAttributeReferenceItemProvider featureAttributeReferenceItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.FeatureAttributeReference}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createFeatureAttributeReferenceAdapter() {
      if (featureAttributeReferenceItemProvider == null) {
         featureAttributeReferenceItemProvider = new FeatureAttributeReferenceItemProvider(this);
      }

      return featureAttributeReferenceItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.FeatureAttributeValue} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected FeatureAttributeValueItemProvider featureAttributeValueItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.FeatureAttributeValue}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createFeatureAttributeValueAdapter() {
      if (featureAttributeValueItemProvider == null) {
         featureAttributeValueItemProvider = new FeatureAttributeValueItemProvider(this);
      }

      return featureAttributeValueItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.expression.FeatureReference} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected FeatureReferenceItemProvider featureReferenceItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.expression.FeatureReference}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createFeatureReferenceAdapter() {
      if (featureReferenceItemProvider == null) {
         featureReferenceItemProvider = new FeatureReferenceItemProvider(this);
      }

      return featureReferenceItemProvider;
   }

   /**
    * This returns the root adapter factory that contains this factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public ComposeableAdapterFactory getRootAdapterFactory() {
      return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
   }

   /**
    * This sets the composed adapter factory that contains this factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
      this.parentAdapterFactory = parentAdapterFactory;
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public boolean isFactoryForType(Object type) {
      return supportedTypes.contains(type) || super.isFactoryForType(type);
   }

   /**
    * This implementation substitutes the factory itself as the key for the adapter.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter adapt(Notifier notifier, Object type) {
      return super.adapt(notifier, this);
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Object adapt(Object object, Object type) {
      if (isFactoryForType(type)) {
         Object adapter = super.adapt(object, type);
         if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
            return adapter;
         }
      }

      return null;
   }

   /**
    * This adds a listener.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void addListener(INotifyChangedListener notifyChangedListener) {
      changeNotifier.addListener(notifyChangedListener);
   }

   /**
    * This removes a listener.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void removeListener(INotifyChangedListener notifyChangedListener) {
      changeNotifier.removeListener(notifyChangedListener);
   }

   /**
    * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void fireNotifyChanged(Notification notification) {
      changeNotifier.fireNotifyChanged(notification);

      if (parentAdapterFactory != null) {
         parentAdapterFactory.fireNotifyChanged(notification);
      }
   }

   /**
    * This disposes all of the item providers created by this factory. 
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void dispose() {
      if (featureModel2ItemProvider != null) featureModel2ItemProvider.dispose();
      if (feature2ItemProvider != null) feature2ItemProvider.dispose();
      if (group2ItemProvider != null) group2ItemProvider.dispose();
      if (attribute2ItemProvider != null) attribute2ItemProvider.dispose();
      if (discreteDomain2ItemProvider != null) discreteDomain2ItemProvider.dispose();
      if (continuousDomain2ItemProvider != null) continuousDomain2ItemProvider.dispose();
      if (interval2ItemProvider != null) interval2ItemProvider.dispose();
      if (constraint2ItemProvider != null) constraint2ItemProvider.dispose();
      if (featureReference2ItemProvider != null) featureReference2ItemProvider.dispose();
      if (requiresItemProvider != null) requiresItemProvider.dispose();
      if (excludesItemProvider != null) excludesItemProvider.dispose();
      if (equalItemProvider != null) equalItemProvider.dispose();
      if (unequalItemProvider != null) unequalItemProvider.dispose();
      if (greaterThanItemProvider != null) greaterThanItemProvider.dispose();
      if (greaterThanOrEqualItemProvider != null) greaterThanOrEqualItemProvider.dispose();
      if (lessThanItemProvider != null) lessThanItemProvider.dispose();
      if (lessThanOrEqualItemProvider != null) lessThanOrEqualItemProvider.dispose();
      if (nestedExpression2ItemProvider != null) nestedExpression2ItemProvider.dispose();
      if (featureAttributeReference2ItemProvider != null) featureAttributeReference2ItemProvider.dispose();
      if (expressionModelItemProvider != null) expressionModelItemProvider.dispose();
      if (featureAttributeReferenceItemProvider != null) featureAttributeReferenceItemProvider.dispose();
      if (featureAttributeValueItemProvider != null) featureAttributeValueItemProvider.dispose();
      if (featureReferenceItemProvider != null) featureReferenceItemProvider.dispose();
   }

}
