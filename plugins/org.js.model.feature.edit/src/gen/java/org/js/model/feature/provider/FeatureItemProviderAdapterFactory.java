/**
 */
package org.js.model.feature.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.js.model.feature.util.FeatureAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FeatureItemProviderAdapterFactory extends FeatureAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
   /**
    * This keeps track of the root adapter factory that delegates to this adapter factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ComposedAdapterFactory parentAdapterFactory;

   /**
    * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected IChangeNotifier changeNotifier = new ChangeNotifier();

   /**
    * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected Collection<Object> supportedTypes = new ArrayList<Object>();

   /**
    * This constructs an instance.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public FeatureItemProviderAdapterFactory() {
      supportedTypes.add(IEditingDomainItemProvider.class);
      supportedTypes.add(IStructuredItemContentProvider.class);
      supportedTypes.add(ITreeItemContentProvider.class);
      supportedTypes.add(IItemLabelProvider.class);
      supportedTypes.add(IItemPropertySource.class);
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.FeatureModel} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected FeatureModelItemProvider featureModelItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.FeatureModel}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createFeatureModelAdapter() {
      if (featureModelItemProvider == null) {
         featureModelItemProvider = new FeatureModelItemProvider(this);
      }

      return featureModelItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.Feature} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected FeatureItemProvider featureItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.Feature}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createFeatureAdapter() {
      if (featureItemProvider == null) {
         featureItemProvider = new FeatureItemProvider(this);
      }

      return featureItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.Group} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected GroupItemProvider groupItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.Group}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createGroupAdapter() {
      if (groupItemProvider == null) {
         groupItemProvider = new GroupItemProvider(this);
      }

      return groupItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.Attribute} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected AttributeItemProvider attributeItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.Attribute}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createAttributeAdapter() {
      if (attributeItemProvider == null) {
         attributeItemProvider = new AttributeItemProvider(this);
      }

      return attributeItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.DiscreteDomain} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected DiscreteDomainItemProvider discreteDomainItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.DiscreteDomain}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createDiscreteDomainAdapter() {
      if (discreteDomainItemProvider == null) {
         discreteDomainItemProvider = new DiscreteDomainItemProvider(this);
      }

      return discreteDomainItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.ContinuousDomain} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ContinuousDomainItemProvider continuousDomainItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.ContinuousDomain}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createContinuousDomainAdapter() {
      if (continuousDomainItemProvider == null) {
         continuousDomainItemProvider = new ContinuousDomainItemProvider(this);
      }

      return continuousDomainItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.Interval} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected IntervalItemProvider intervalItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.Interval}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createIntervalAdapter() {
      if (intervalItemProvider == null) {
         intervalItemProvider = new IntervalItemProvider(this);
      }

      return intervalItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.Constraint} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ConstraintItemProvider constraintItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.Constraint}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createConstraintAdapter() {
      if (constraintItemProvider == null) {
         constraintItemProvider = new ConstraintItemProvider(this);
      }

      return constraintItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.FeatureReference} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected FeatureReferenceItemProvider featureReferenceItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.FeatureReference}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createFeatureReferenceAdapter() {
      if (featureReferenceItemProvider == null) {
         featureReferenceItemProvider = new FeatureReferenceItemProvider(this);
      }

      return featureReferenceItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.NotExpression} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected NotExpressionItemProvider notExpressionItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.NotExpression}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createNotExpressionAdapter() {
      if (notExpressionItemProvider == null) {
         notExpressionItemProvider = new NotExpressionItemProvider(this);
      }

      return notExpressionItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.AndExpression} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected AndExpressionItemProvider andExpressionItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.AndExpression}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createAndExpressionAdapter() {
      if (andExpressionItemProvider == null) {
         andExpressionItemProvider = new AndExpressionItemProvider(this);
      }

      return andExpressionItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.OrExpression} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected OrExpressionItemProvider orExpressionItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.OrExpression}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createOrExpressionAdapter() {
      if (orExpressionItemProvider == null) {
         orExpressionItemProvider = new OrExpressionItemProvider(this);
      }

      return orExpressionItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.ImpliesExpression} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ImpliesExpressionItemProvider impliesExpressionItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.ImpliesExpression}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createImpliesExpressionAdapter() {
      if (impliesExpressionItemProvider == null) {
         impliesExpressionItemProvider = new ImpliesExpressionItemProvider(this);
      }

      return impliesExpressionItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.ExcludesExpression} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected ExcludesExpressionItemProvider excludesExpressionItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.ExcludesExpression}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createExcludesExpressionAdapter() {
      if (excludesExpressionItemProvider == null) {
         excludesExpressionItemProvider = new ExcludesExpressionItemProvider(this);
      }

      return excludesExpressionItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.NestedExpression} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected NestedExpressionItemProvider nestedExpressionItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.NestedExpression}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createNestedExpressionAdapter() {
      if (nestedExpressionItemProvider == null) {
         nestedExpressionItemProvider = new NestedExpressionItemProvider(this);
      }

      return nestedExpressionItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.AttributeComparisonExpression} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected AttributeComparisonExpressionItemProvider attributeComparisonExpressionItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.AttributeComparisonExpression}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createAttributeComparisonExpressionAdapter() {
      if (attributeComparisonExpressionItemProvider == null) {
         attributeComparisonExpressionItemProvider = new AttributeComparisonExpressionItemProvider(this);
      }

      return attributeComparisonExpressionItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.AttributeReference} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected AttributeReferenceItemProvider attributeReferenceItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.AttributeReference}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createAttributeReferenceAdapter() {
      if (attributeReferenceItemProvider == null) {
         attributeReferenceItemProvider = new AttributeReferenceItemProvider(this);
      }

      return attributeReferenceItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.js.model.feature.AttributeValueLiteral} instances.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   protected AttributeValueLiteralItemProvider attributeValueLiteralItemProvider;

   /**
    * This creates an adapter for a {@link org.js.model.feature.AttributeValueLiteral}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter createAttributeValueLiteralAdapter() {
      if (attributeValueLiteralItemProvider == null) {
         attributeValueLiteralItemProvider = new AttributeValueLiteralItemProvider(this);
      }

      return attributeValueLiteralItemProvider;
   }

   /**
    * This returns the root adapter factory that contains this factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public ComposeableAdapterFactory getRootAdapterFactory() {
      return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
   }

   /**
    * This sets the composed adapter factory that contains this factory.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
      this.parentAdapterFactory = parentAdapterFactory;
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public boolean isFactoryForType(Object type) {
      return supportedTypes.contains(type) || super.isFactoryForType(type);
   }

   /**
    * This implementation substitutes the factory itself as the key for the adapter.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Adapter adapt(Notifier notifier, Object type) {
      return super.adapt(notifier, this);
   }

   /**
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   @Override
   public Object adapt(Object object, Object type) {
      if (isFactoryForType(type)) {
         Object adapter = super.adapt(object, type);
         if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
            return adapter;
         }
      }

      return null;
   }

   /**
    * This adds a listener.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void addListener(INotifyChangedListener notifyChangedListener) {
      changeNotifier.addListener(notifyChangedListener);
   }

   /**
    * This removes a listener.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void removeListener(INotifyChangedListener notifyChangedListener) {
      changeNotifier.removeListener(notifyChangedListener);
   }

   /**
    * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void fireNotifyChanged(Notification notification) {
      changeNotifier.fireNotifyChanged(notification);

      if (parentAdapterFactory != null) {
         parentAdapterFactory.fireNotifyChanged(notification);
      }
   }

   /**
    * This disposes all of the item providers created by this factory. 
    * <!-- begin-user-doc -->
    * <!-- end-user-doc -->
    * @generated
    */
   public void dispose() {
      if (featureModelItemProvider != null) featureModelItemProvider.dispose();
      if (featureItemProvider != null) featureItemProvider.dispose();
      if (groupItemProvider != null) groupItemProvider.dispose();
      if (attributeItemProvider != null) attributeItemProvider.dispose();
      if (discreteDomainItemProvider != null) discreteDomainItemProvider.dispose();
      if (continuousDomainItemProvider != null) continuousDomainItemProvider.dispose();
      if (intervalItemProvider != null) intervalItemProvider.dispose();
      if (constraintItemProvider != null) constraintItemProvider.dispose();
      if (featureReferenceItemProvider != null) featureReferenceItemProvider.dispose();
      if (notExpressionItemProvider != null) notExpressionItemProvider.dispose();
      if (andExpressionItemProvider != null) andExpressionItemProvider.dispose();
      if (orExpressionItemProvider != null) orExpressionItemProvider.dispose();
      if (impliesExpressionItemProvider != null) impliesExpressionItemProvider.dispose();
      if (excludesExpressionItemProvider != null) excludesExpressionItemProvider.dispose();
      if (nestedExpressionItemProvider != null) nestedExpressionItemProvider.dispose();
      if (attributeComparisonExpressionItemProvider != null) attributeComparisonExpressionItemProvider.dispose();
      if (attributeReferenceItemProvider != null) attributeReferenceItemProvider.dispose();
      if (attributeValueLiteralItemProvider != null) attributeValueLiteralItemProvider.dispose();
   }

}
