-- @path ptnet=/org.js.model.feature.ptnet.m2m.atl/models/ptnetLoLA.ecore
-- @path featuremodel=/org.js.model.feature.ptnet.m2m.atl/models/feature.ecore

module feature2ptnet;
create OUT : ptnet from IN : fm;

--helper [context context_type]? def : helper_name(parameters) : return_type = exp;
-------------------------------------------------------------------------------
-- ATTRIBUTES
-------------------------------------------------------------------------------
helper def : start : ptnet!Transition = OclUndefined;
helper def : end : ptnet!Transition = OclUndefined;

-------------------------------------------------------------------------------
-- HELPER/METHODS
-------------------------------------------------------------------------------

--get all diskrete attributes for a feature
helper context fm!Feature def : diskreteAttributes () : Set(fm!Attribute) = 
	self.attributes.asSet()->select(a | a.domain.oclIsKindOf(fm!DiscreteDomain));

--get all continuous attributes for a feature
helper context fm!Feature def : continousAttributes () : Set(fm!Attribute) = 
	self.attributes.asSet()->select(a | a.domain.oclIsKindOf(fm!ContinuousDomain));

--calculates a sequence with integer from two integer which indicates the lower and upper bound.
-- Used for calculating the values of a continous domain
helper context fm!ContinuousDomain def : continousValues (counter : Integer) : Sequence(String) =
	if counter >= self.intervals->size() then
		let interval :  fm!Interval = self.intervals.at(counter) in
		let values : Sequence(String) = thisModule.continousValues(interval.lowerBound,interval.upperBound) in
		values
	else
		let interval :  fm!Interval = self.intervals.at(counter) in
		let values : Sequence(String) = thisModule.continousValues(interval.lowerBound,interval.upperBound) in
		values->union(self.continousValues(counter+1))
	endif
;
	

helper def : continousValues (lowerBound : Integer, upperBound : Integer) : Sequence(String) = 
	if lowerBound >= upperBound then
		let index : String = upperBound in Sequence{index}
	else
		let index : String = lowerBound in 
		let indicies : Sequence(String) = Sequence{lowerBound} in
		indicies->union(thisModule.continousValues(lowerBound+1,upperBound))
	endif
;

-- get the features for the given indizies
helper def : getFeatureTupel (indizies : Sequence(Integer), features : Sequence(fm!Feature), index : Integer) : Sequence(fm!Feature) =
	if index = indizies.size() then
		let w : Integer = indizies.at(index) in
		Sequence{features->at(w)}
	else
		let w : Integer = indizies->at(index) in
		let x : Sequence(fm!Feature) = Sequence{features->at(w)} in 
		let y : Sequence(fm!Feature) = thisModule.getFeatureTupel(indizies,features,index +1) in
		x->union(y)
	endif
;

-- intializes the indizies with 0
helper def : initIndizies(start : Integer, end : Integer) : Sequence(Integer) =
	if start = end then 
		Sequence{start}
	else
		let x : Sequence(Integer) = Sequence{start} in
		let y : Sequence(Integer) = thisModule.initIndizies(start+1,end) in
		x.union(y)
	endif
;

-- checks if the indizies can be incremented
helper def : canIncIndex (indizies : Sequence(Integer), max : Integer) : Boolean = 
	if indizies->exists(i | i <= max - indizies->size()) then
		true
	else 
		false
	endif
;
	
-- increments the index by one at a suitable position
-- index the suitable position, init with the last index of indizies. Will be set to the next suitable index automatically
-- indizies the indizies, one of them is going to be increased
-- the max value for an index
helper def : incIndex(indizies : Sequence(Integer), index : Integer, max : Sequence(Integer)) : Sequence(Integer) =
	if indizies->last() < max then
		let x : Integer = indizies.last() + 1 in
		let new_indizies : Sequence(Integer) = indizies->excluding(indizies->last()) in
		new_indizies->including(x)
	else 
		if index = 1 then 
			let new_value : Integer = indizies->at(index) + 1 in
			thisModule.initIndizies(new_value, (indizies->size() - index) + new_value)
		else 
			if index < indizies->size() then
				let new_value : Integer = indizies->at(index) + 1 in
				let indizies_old_part : Sequence(Integer) = indizies->subSequence(1, index-1)->asSequence() in
				let indizies_new_part : Sequence(Integer) = thisModule.initIndizies(new_value, (indizies->size() - index) + new_value) in
				indizies_old_part->union(indizies_new_part)
			else
				thisModule.incIndex(indizies,index-1,max)
			endif
		endif
	endif
;

-- collects the feature tupel and increases the indizies for the next combination until the indizies cant be increased any more
helper def : calcCombinations(indizies : Sequence(Integer), features : Sequence(fm!Feature)) : Sequence(Sequence(fm!Feature)) =
	let first : Sequence(fm!Feature) = thisModule.getFeatureTupel(indizies, features, 1) in
	let x : Sequence(Sequence(fm!Feature)) = Sequence{first} in
	if thisModule.canIncIndex(indizies,  features.size()) then
		let indi : Sequence(Integer) = thisModule.incIndex(indizies,indizies.size(), features.size()) in
		x.union(thisModule.calcCombinations(indi, features))
	else 
		x
	endif	
;

-- get all possible combinations of features
-- start init with min cardinality
-- end init with max cardinality
helper context fm!Group def : getFeatureCombinations(start : Integer, end : Integer) : Sequence(Sequence(fm!Feature)) =
	if start = end then
		let indizies : Sequence(Integer) = thisModule.initIndizies(1,start) in
		thisModule.calcCombinations(indizies,self.childFeatures.asSequence())
	else
		let indizies : Sequence(Integer) = thisModule.initIndizies(1,start) in
		let x : Sequence(Sequence(fm!Feature)) = thisModule.calcCombinations(indizies,self.childFeatures.asSequence()) in
		let y : Sequence(Sequence(fm!Feature)) = self.getFeatureCombinations(start+1,end) in
		x.union(y)
	endif
;
	
-- Enum for groups
--0 for mandatory
--1 for optional
--2 for alternative
--3 for exclusive optional
--4 for other
helper context fm!Group def : groupCardinality() : Integer = 
	if ((self.minCardinality = self.maxCardinality) and (self.childFeatures->size() = self.maxCardinality))
	then
		0 -- mandatory
	else
		if ((self.minCardinality = 0) and (self.childFeatures->size() = self.maxCardinality))
		then
			1--optional
		else
			if ((self.minCardinality = 1) and (self.maxCardinality = 1))
			then
				2 --alternative
			else
				3 --other			
			endif
		endif
	endif
;

-- combines all feature ids in a string
helper def : getCombineIDs(features : Sequence(fm!Feature)) : String = 
	if features.size() = 1 then
		'[' + features->first().id + ']'
	else
		let x : String = features->first().id in
		'[' + x + ',' + thisModule.getCombineIDs2(features,2) + ']'
	endif
;
	
-- in case more then one feature are in features of getCombineIDs
helper def : getCombineIDs2(features : Sequence(fm!Feature), index : Integer) : String =
	if index = features->size() then
		features->at(index).id
	else
		let x : String = features->at(index).id + ',' in
		x + thisModule.getCombineIDs2(features,index + 1)
	endif
;

-- checks if an Expression is an implies expression between two features
helper context fm!Expression def : isImplies() : Boolean =
	if self->oclIsKindOf(fm!ImpliesExpression) then 
		let x : fm!ImpliesExpression = self in
		let left : fm!Expression = x.operand1 in
		let right : fm!Expresion = x.operand2 in
		if left.oclIsKindOf(fm!FeatureReference) and right.oclIsKindOf(fm!FeatureReference) then
			true
		else
			false
		endif
	else 
		if self.oclIsKindOf(fm!NestedExpression) then
			let x : fm!NestedExpression = self in
			let y : fm!Expression = x.operand in
			x.isImplies()
		else
			false
		endif
	endif
;
	
-- checks if an Expression is an implies expression between two features
helper context fm!Expression def : isExclude() : Boolean =
	if self->oclIsKindOf(fm!ExcludesExpression) then 
		let x : fm!ExcludesExpression = self in
		let left : fm!Expression = x.operand1 in
		let right : fm!Expresion = x.operand2 in
		if left.oclIsKindOf(fm!FeatureReference) and right.oclIsKindOf(fm!FeatureReference) then
			true
		else
			false
		endif
	else 
		if self.oclIsKindOf(fm!NestedExpression) then
			let x : fm!NestedExpression = self in
			let y : fm!Expression = x.operand in
			x.isImplies()
		else
			false
		endif
	endif
;
	
-- get the ptNet
helper def : getPtNet(): ptnet!PtNet = ptnet!PtNet->allInstances()->first();

-------------------------------------------------------------------------------
-- RULES
-------------------------------------------------------------------------------

-- Basic Elements of the Workflow Petri Net
entrypoint rule initPt() {
	to
		i : ptnet!Place (name <- 'i',token <- 1),
		o : ptnet!Place (name <- 'o'),
		start : ptnet!Transition (name <- 'start'),
		end : ptnet!Transition (name <- 'end'),
		i_start : ptnet!ArcToTransition (source <- i, target <- start),
		end_o : ptnet!ArcToPlace (source <- end, target <- o),
		pn : ptnet!PtNet (
			arcs <- ptnet!Arc.allInstances(),
			places <- ptnet!Place.allInstances(),
			transitions <- ptnet!Transition.allInstances())
	do{
		thisModule.start <- start;
		thisModule.end <- end;
	}
}

rule continuousAttribute2ptnet {
	from a : fm!Attribute (if a.domain.oclIsTypeOf(fm!ContinuousDomain) then
			true
		else
			false
		endif
	)
	using{
		feature : fm!Feature = a.feature;
		intervals : Sequence(String) = a.domain.continousValues(1);
	}
	do{
		for(value in intervals){
			thisModule.domainValue(feature, a, value);
		}
	}
}

rule discreteAttribute2ptnet {
	from a : fm!Attribute (if a.domain.oclIsTypeOf(fm!DiscreteDomain) then
			true
		else
			false
		endif
	)
	using{
		feature : fm!Feature = a.feature;
	}
	do{
		for(value in a.domain.values){
			thisModule.domainValue(feature, a, value);
		}
	}
}

--creates a choice between a domain value of a attribute from a feature
-- feature The Feature of the attribute
-- attribute The Attribute from the Feature
-- name Name of the Domain Value
rule domainValue (feature : fm!Feature,
				  attribute : fm!Attribute,
				  name : String){
	using{
		pn: ptnet!PtNet = thisModule.getPtNet();
	}
	to
		i_a : ptnet!Place (name <- 'i_' + feature.id + '.' + attribute.name + '.' + name),
		o_a : ptnet!Place (name <- 'o_' + feature.id + '.' + attribute.name + '.' + name),
		start_i_a_arc : ptnet!ArcToPlace (source <- thisModule.start, target <- i_a), 
		o_a_end_arc : ptnet!ArcToTransition (source <- o_a, target <- thisModule.end),
		select_a : ptnet!Transition (name <- '+' + feature.id + '.' + attribute.name + '.' + name),
		deselect_a : ptnet!Transition (name <- '-' + feature.id + '.' + attribute.name + '.' + name),
		i_sel_arc : ptnet!ArcToTransition (source <- i_a, target <- select_a),
		i_des_arc : ptnet!ArcToTransition (source <- i_a, target <- deselect_a),
		sel_o_arc : ptnet!ArcToPlace (source <- select_a, target <- o_a),
		des_o_arc : ptnet!ArcToPlace (source <- deselect_a, target <- o_a)
	do{
		pn.places <- i_a;
		pn.places <- o_a;
		pn.transitions <- select_a;
		pn.transitions <- deselect_a;
		pn.arcs <- start_i_a_arc;
		pn.arcs <- o_a_end_arc;
		pn.arcs <- i_sel_arc;
		pn.arcs <- i_des_arc;
		pn.arcs <- sel_o_arc;
		pn.arcs <- des_o_arc;
	}
}

-- Choice for every Feature. Connected to start and end transition
rule feature2ptnet {
	from f : fm!Feature
	using{
		pn: ptnet!PtNet = thisModule.getPtNet();
		con_attr : Sequence(fm!Attribute) = f.continousAttributes();
		dis_attr : Sequence(fm!Attribute) = f.diskreteAttributes();
	}
	to
		add : ptnet!Transition (name <- '+' + f.id),
		rem : ptnet!Transition (name <- '-' + f.id),
		i : ptnet!Place (name <- 'i_' + f.id),
		o : ptnet!Place (name <- 'o_' + f.id),
		i_add_arc : ptnet!ArcToTransition (source <- i, target <- add),
		i_rem_arc : ptnet!ArcToTransition (source <- i, target <- rem),
		add_o_arc : ptnet!ArcToPlace (source <- add, target <- o),
		rem_o_arc : ptnet!ArcToPlace (source <- rem, target <- o),
		start_i : ptnet!ArcToPlace (source <- thisModule.start, target <- i),
		o_end : ptnet!ArcToTransition (source <- o, target <- thisModule.end)
	do{
		pn.places <- i;
		pn.places <- o;
		pn.transitions <- add;
		pn.transitions <- rem;
		pn.arcs <- i_add_arc;
		pn.arcs <- i_rem_arc;
		pn.arcs <- add_o_arc;
		pn.arcs <- rem_o_arc;
		pn.arcs <- start_i;
		pn.arcs <- o_end;
		for (a in con_attr) {
			thisModule.createFeatureContinuousAttributeRelation(f, add, rem, a);
		}
		for (a in dis_attr) {
			thisModule.createFeatureDiscreteAttributeRelation(f, add, rem, a);
		}
	}
}

-- Creates the feature relation to its continuous attributes
--feature The feature for the attribute
--add The add transition from the feature
--rem The rem transition from the feature
--attribute The continuous attribute from the feature
rule createFeatureContinuousAttributeRelation(feature : fm!Feature,
											  add : ptnet!Transition,
											  rem : ptnet!Transition,
											  attribute : fm!Attribute) {
	using {
		pn: ptnet!PtNet = thisModule.getPtNet();
		intervals : Sequence(String) = attribute.domain.continousValues(1);
	}
	to
		attribute_added : ptnet!Place (name <- feature.id + '.' + attribute.name + '_added'),
		attribute_added_feature_arc : ptnet!ArcToTransition (source <- attribute_added, target <- add)
	do {
		pn.places <- attribute_added;
		pn.arcs <- attribute_added_feature_arc;
		for(value in intervals){
			thisModule.createFeatureDomainValueRelation(feature, add, rem, attribute, attribute_added, value, intervals);
		}
	}
}

-- Creates the feature relation to its discrete attributes
--feature The feature for the attribute
--add The add transition from the feature
--rem The rem transition from the feature
--attribute The discrete attribute from the feature
rule createFeatureDiscreteAttributeRelation(feature : fm!Feature,
											add : ptnet!Transition,
											rem : ptnet!Transition,
											attribute : fm!Attribute) {
	using {
		pn: ptnet!PtNet = thisModule.getPtNet();
	}
	to
		attribute_added : ptnet!Place (name <- feature.id + '.' + attribute.name + '_added'),
		attribute_added_feature_arc : ptnet!ArcToTransition (source <- attribute_added, target <- add)
	do {
		pn.places <- attribute_added;
		pn.arcs <- attribute_added_feature_arc;
		for(value in attribute.domain.values){
			thisModule.createFeatureDomainValueRelation(feature, add, rem, attribute, attribute_added, value, attribute.domain.values);
		}
	}
}

--creates the relation between a domain value from an attribute to its feature
--feature The feature that contains the attribute
--add The transition, thats selects the feature
--rem The transition, thats deselects the feature
--attribute The attribute from the feature
--name The name of the domain value
--allNames All domain value names
rule createFeatureDomainValueRelation (feature : fm!Feature,
										add : ptnet!Transition,
										rem : ptnet!Transition,
										attribute : fm!Attribute,
										attribute_added : ptnet!Place,
										name : String,
										allNames : Sequence(String)) {
	using {
		pn: ptnet!PtNet = thisModule.getPtNet();
		--gets the add transition for the domain value
		domainValue_add : ptnet!Transition = pn.transitions->select(t | t.name = ('+' + feature.id + '.' + attribute.name + '.' + name)).first();
		--gets the remove transition for the domain value
		domainValue_rem : ptnet!Transition = pn.transitions->select(t | t.name = ('-' + feature.id + '.' + attribute.name + '.' + name)).first();
	}
	to
		-- arc from +a.dv to a added
		attr_add_to_attr_added_arc : ptnet!ArcToPlace (source <- domainValue_add, target <- attribute_added),
		-- place and arcs from +f to +a.dv
		f_add_dv_add : ptnet!Place (name <- '+' + feature.id + '_to_+' + name),
		f_add_dv_add_arc1 : ptnet!ArcToPlace (source <- add, target <- f_add_dv_add),
		f_add_dv_add_arc2 : ptnet!ArcToTransition (source <- f_add_dv_add, target <- domainValue_add),
		-- place and arcs from -a.dv to -f
		rdv_rf : ptnet!Place (name <- '-' + name + '_to_-' + feature.id),
		rdv_rf_arc1 : ptnet!ArcToPlace (source <- domainValue_rem, target <- rdv_rf),
		rdv_rf_arc2 : ptnet!ArcToTransition (source <- rdv_rf, target <- rem),
		-- place and arcs from -f to -a.dv
		rf_rdv : ptnet!Place (name <- '-' + feature.id + '_to_-' + name),
		rf_rdv_arc1 : ptnet!ArcToPlace (source <- rem, target <- rf_rdv),
		rf_rdv_arc2 : ptnet!ArcToTransition (source <- rf_rdv, target <- domainValue_rem)
	do{
		pn.places <- f_add_dv_add;
		pn.places <- rdv_rf;
		pn.places <- rf_rdv;
		pn.arcs <- attr_add_to_attr_added_arc;
		pn.arcs <- f_add_dv_add_arc1;
		pn.arcs <- f_add_dv_add_arc2;
		pn.arcs <- rdv_rf_arc1;
		pn.arcs <- rdv_rf_arc2;
		pn.arcs <- rf_rdv_arc1;
		pn.arcs <- rf_rdv_arc2;
		for (otherName in allNames) {
			if (otherName <> name)
				thisModule.createDomainValueDomainValueRelation(feature, rf_rdv, attribute, name, domainValue_add, domainValue_rem, otherName);
		}
	}
}

--creates the domain value relation
--feature The feature for the attribute
--attribute The attribute from the feature
--name The name of the domain value
--domainValue_add The select transition of the domain value
--domainValue_rem The deselect transition of the domain value
--otherName The name of another domain value from the same attribute
rule createDomainValueDomainValueRelation(feature : fm!Feature, 
										  rf_rdv : ptnet!Place,
										  attribute : fm!Attribute, 
										  name  : String, 
										  domainValue_add : ptnet!Transition, 
										  domainValue_rem : ptnet!Transition, 
										  otherName  : String){
	using {
		pn: ptnet!PtNet = thisModule.getPtNet();
		--gets the add transition for the other domain value
		otherDomainValue_add : ptnet!Transition  = pn.transitions->select(p | p.name = ('+' + feature.id + '.' + attribute.name + '.' + otherName)).first();
		--gets the remove transition for the other domain value
		--otherDomainValue_rem = pn.places->select(p | p.name.startsWith('-' + feature.id + '.' + attribute.name + '.' + otherName));
	}
	to
		dv_rem_to_odv_add : ptnet!Place (name <- '-' + name + '_to_+' + otherName),
		dv_rem_to_odv_add_arc1 : ptnet!ArcToPlace (source <- domainValue_rem, target <- dv_rem_to_odv_add),
		dv_rem_to_odv_add_arc2 : ptnet!ArcToTransition (source <- dv_rem_to_odv_add, target <- otherDomainValue_add),
		
		odv_add_to_rf_rdv_arc : ptnet!ArcToPlace (source <- otherDomainValue_add, target <- rf_rdv)
	do{
		pn.places <- dv_rem_to_odv_add;
		pn.arcs <- dv_rem_to_odv_add_arc1;
		pn.arcs <- dv_rem_to_odv_add_arc2;
		pn.arcs <- odv_add_to_rf_rdv_arc;
	}
}

-- Mandatory Feature groups
rule mandatoryGroup2ptnet {
	from g : fm!Group (if g.groupCardinality() = 0 then
			true
		else
			false
		endif
	)
	using{
		parent : fm!Feature = g.eContainer();
		childs :  Sequence(fm!Feature) = g.childFeatures;
	}
	do {
		for(c in childs) {
			thisModule.mgroup(parent,c);
		}
	}
}

-- Mandatory feature connection
-- p parent of child
-- c child of parent
rule mgroup (p : fm!Feature, c : fm!Feature){
	using{
		pn: ptnet!PtNet = thisModule.getPtNet();
		p_add : ptnet!Transition = thisModule.resolveTemp(p, 'add');
		p_rem : ptnet!Transition = thisModule.resolveTemp(p, 'rem');
		c_add : ptnet!Transition = thisModule.resolveTemp(c, 'add');
		c_rem : ptnet!Transition = thisModule.resolveTemp(c, 'rem');
	}
	to
		p_add_c_add : ptnet!Place (name <- p_add.name + '_to_' + c_add.name),
		paca_arc1 : ptnet!ArcToPlace (source <- p_add, target <- p_add_c_add),
		paca_arc2 : ptnet!ArcToTransition (source <- p_add_c_add, target <- c_add),
		p_rem_c_rem : ptnet!Place (name <- p_rem.name + '_to_' + c_rem.name),
		prcr_arc1 : ptnet!ArcToPlace (source <- p_rem, target <- p_rem_c_rem),
		prcr_arc2 : ptnet!ArcToTransition (source <- p_rem_c_rem, target <- c_rem),
		c_add_p_add : ptnet!Place (name <- c_add.name + '_to_' + p_add.name),
		capa_arc1 : ptnet!ArcToPlace (source <- c_add, target <- c_add_p_add),
		capa_arc2 : ptnet!ArcToTransition (source <- c_add_p_add, target <- p_add),
		c_rem_p_rem : ptnet!Place (name <- c_rem.name + '_to_' + p_rem.name),
		crpr_arc1 : ptnet!ArcToPlace (source <- c_rem, target <- c_rem_p_rem),
		crpr_arc2 : ptnet!ArcToTransition (source <- c_rem_p_rem, target <- p_rem)
	do{
		pn.places <- p_add_c_add;
		pn.places <- p_rem_c_rem;
		pn.places <- c_add_p_add;
		pn.places <- c_rem_p_rem;
		pn.arcs <- paca_arc1;
		pn.arcs <- paca_arc2;
		pn.arcs <- prcr_arc1;
		pn.arcs <- prcr_arc2;
		pn.arcs <- capa_arc1;
		pn.arcs <- capa_arc2;
		pn.arcs <- crpr_arc1;
		pn.arcs <- crpr_arc2;
	}
}

-- optional Feature groups
rule optionalGroup2ptnet {
	from g : fm!Group (if g.groupCardinality() = 1 then
			true
		else
			false
		endif
	)
	using{
		pn: ptnet!PtNet = thisModule.getPtNet();
		parent : fm!Feature = g.eContainer();
		childs :  Sequence(fm!Feature) = g.childFeatures;
	}
	do {
		for(c in childs) {
			thisModule.optGroup(parent,c);
		}
	}
}

-- optional feature group connection
-- p parent of child
-- c child of parent
rule optGroup (p : fm!Feature, c : fm!Feature){
	using{
		pn: ptnet!PtNet = thisModule.getPtNet();
		p_add : ptnet!Transition = thisModule.resolveTemp(p, 'add');
		p_rem : ptnet!Transition = thisModule.resolveTemp(p, 'rem');
		c_add : ptnet!Transition = thisModule.resolveTemp(c, 'add');
		c_rem : ptnet!Transition = thisModule.resolveTemp(c, 'rem');
	}
	to
		parent_added : ptnet!Place (name <- p_add.name + '_to_' + c_add.name),
		p_added_arc : ptnet!ArcToPlace (source <- p_add, target <- parent_added),
		par_added_child_add_arc : ptnet!ArcToTransition (source <- parent_added, target <- c_add),
		c_rem_p_rem : ptnet!Place (name <- c_rem.name + '_to_' + p_rem.name),
		crpr_arc1 : ptnet!ArcToPlace (source <- c_rem, target <- c_rem_p_rem),
		crpr_arc2 : ptnet!ArcToTransition (source <- c_rem_p_rem, target <- p_rem)
	do{
		pn.places <- parent_added;
		pn.arcs <- p_added_arc;
		pn.arcs <- par_added_child_add_arc;
		pn.places <- c_rem_p_rem;
		pn.arcs <- crpr_arc1;
		pn.arcs <- crpr_arc2;
	}
}

-- alternative group
rule alternativeGroup2ptnet{
	from g : fm!Group (if g.groupCardinality() = 2 then
			true
		else
			false
		endif
	)
	using{
		pn: ptnet!PtNet = thisModule.getPtNet();
		parent : fm!Feature = g.eContainer();
		childs :  Sequence(fm!Feature) = g.childFeatures;
		p_add : ptnet!Transition = thisModule.resolveTemp(parent, 'add');
	}
	to
		c_added : ptnet!Place (name <- parent.id + 'c_added'),
		ca_arc : ptnet!ArcToTransition (source <- c_added, target <- p_add)
	do{
		pn.places <- c_added;
		pn.arcs <- ca_arc;
		for(c in childs) {
			thisModule.altGroup(parent,c,c_added,childs);
		}
	}
}

-- alternative group child parent relation
-- p parent feature
-- c child feature
-- c_added place if a child is added
-- childs all feature children of the current group
rule altGroup(p : fm!Feature,
			  c : fm!Feature, 
			  c_added : ptnet!Place, 
			  childs : Sequence(fm!Feature)) {
	using{
		pn: ptnet!PtNet = thisModule.getPtNet();
		p_add : ptnet!Transition = thisModule.resolveTemp(p, 'add');
		p_rem : ptnet!Transition = thisModule.resolveTemp(p, 'rem');
		c_add : ptnet!Transition = thisModule.resolveTemp(c, 'add');
		c_rem : ptnet!Transition = thisModule.resolveTemp(c, 'rem');	
	}
	to
		-- +c to c added
		c_add_to_c_added_arc : ptnet!ArcToPlace (source <- c_add, target <- c_added),
		-- +p to +c
		apac : ptnet!Place (name <- p_add.name + '_to_' + c_add.name),
		apac_arc1 : ptnet!ArcToPlace (source <- p_add, target <- apac),
		apac_arc2 : ptnet!ArcToTransition (source <- apac, target <- c_add),
		-- -c to -p
		rcrp : ptnet!Place (name <- c_rem.name + '_to_' + p_rem.name),
		rcrp_arc1 : ptnet!ArcToPlace (source <- c_rem, target <- rcrp),
		rcrp_arc2 : ptnet!ArcToTransition (source <- rcrp, target <- p_rem),
		-- -p to -c
		rprc : ptnet!Place (name <- p_rem.name + '_to_' + c_rem.name),
		rprc_arc1 : ptnet!ArcToPlace (source <- p_rem, target <- rprc),
		rprc_arc2 : ptnet!ArcToTransition (source <- rprc, target <- c_rem)
		
	do{
		pn.places <- apac;
		pn.places <- rcrp;
		pn.places <- rprc;
		pn.arcs <- c_add_to_c_added_arc;
		pn.arcs <- apac_arc1;
		pn.arcs <- apac_arc2;
		pn.arcs <- rcrp_arc1;
		pn.arcs <- rcrp_arc2;
		pn.arcs <- rprc_arc1;
		pn.arcs <- rprc_arc2;
		for(child in childs) {
			if (child.id <> c.id)
				thisModule.altGroup2(c, child, rprc);
		}
	}
}

-- alternativ group child to child relations
-- x current child
-- y other child
-- rprx Place from -p to -x 
rule altGroup2(x : fm!Feature, y: fm!Feature, rprx : ptnet!Place){
	using{
		pn: ptnet!PtNet = thisModule.getPtNet();
		x_add : ptnet!Transition = thisModule.resolveTemp(x, 'add');
		x_rem : ptnet!Transition = thisModule.resolveTemp(x, 'rem');
		y_add : ptnet!Transition = thisModule.resolveTemp(y, 'add');
		--y_rem : ptnet!Transition = thisModule.resolveTemp(y, 'rem');
	}
	to
		x_rem_to_y_add : ptnet!Place (name <- x_rem.name + '_to_' + y_add.name),
		x_rem_to_y_add_arc1 : ptnet!ArcToPlace (source <- x_rem, target <- x_rem_to_y_add),
		x_rem_to_y_add_arc2 : ptnet!ArcToTransition (source <- x_rem_to_y_add, target <- y_add),
		
		y_add_to_rprx_arc : ptnet!ArcToPlace (source <- y_add, target <- rprx)
	do{
		pn.places <- x_rem_to_y_add;
		pn.arcs <- x_rem_to_y_add_arc1;
		pn.arcs <- x_rem_to_y_add_arc2;
		pn.arcs <- y_add_to_rprx_arc;
	}
}

--require constraints between two Features
rule createFeatureRequireConstraint{
	from c : fm!Constraint (if c.expression.isImplies() then
			true
		else
			false
		endif
	)
	using {
		pn: ptnet!PtNet = thisModule.getPtNet();
		impEx : fm!ImpliesExpression = c.expression;
		left : fm!FeatureReference = impEx.operand1;
		right : fm!FeatureReference = impEx.operand2;
		f1 : fm!Feature = left.feature;
		f2 : fm!Feature = right.feature;
		a_add : ptnet!Transition = thisModule.resolveTemp(f1, 'add');
		a_rem : ptnet!Transition = thisModule.resolveTemp(f1, 'rem');
		b_add : ptnet!Transition = thisModule.resolveTemp(f2, 'add');
		b_rem : ptnet!Transition = thisModule.resolveTemp(f2, 'rem');		
	}
	to
		arbr : ptnet!Place (name <- a_rem.name + '_to_' + b_rem.name),
		arbr_arc1 : ptnet!ArcToPlace (source <- a_rem, target <- arbr),
		arbr_arc2 : ptnet!ArcToTransition (source <- arbr, target <- b_rem),
		baaa : ptnet!Place (name <- b_add.name + '_to_' + a_add.name),
		baaa_arc1 : ptnet!ArcToPlace (source <- b_add, target <- baaa),
		baaa_arc2 : ptnet!ArcToTransition (source <- baaa, target <- a_add)
	do{
		pn.places <- arbr;
		pn.places <- baaa;
		pn.arcs <- arbr_arc1;
		pn.arcs <- arbr_arc2;
		pn.arcs <- baaa_arc1;
		pn.arcs <- baaa_arc2;
	}
}

--exclude constraints between two Features
-- a -> not b => -a -- +b, -b -- +a
rule createFeatureExcludeConstraint{
	from c : fm!Constraint (if c.expression.isExclude() then
			true
		else
			false
		endif
	)
	using {
		pn: ptnet!PtNet = thisModule.getPtNet();
		exEx : fm!ExcludesExpression = c.expression;
		left : fm!FeatureReference = exEx.operand1;
		right : fm!FeatureReference = exEx.operand2;
		a : fm!Feature = left.feature;
		b : fm!Feature = right.feature;
		a_add : ptnet!Transition = thisModule.resolveTemp(a, 'add');
		a_rem : ptnet!Transition = thisModule.resolveTemp(a, 'rem');
		b_add : ptnet!Transition = thisModule.resolveTemp(b, 'add');
		b_rem : ptnet!Transition = thisModule.resolveTemp(b, 'rem');		
	}
	to
		arba : ptnet!Place (name <- a_rem.name + '_to_' + b_add.name),
		arba_arc1 : ptnet!ArcToPlace (source <- a_rem, target <- arba),
		arba_arc2 : ptnet!ArcToTransition (source <- arba, target <- b_add),
		braa : ptnet!Place (name <- b_rem.name + '_to_' + a_rem.name),
		braa_arc1 : ptnet!ArcToPlace (source <- b_rem, target <- braa),
		braa_arc2 : ptnet!ArcToTransition (source <- braa, target <- a_add)
	do{
		pn.places <- arba;
		pn.places <- braa;
		pn.arcs <- arba_arc1;
		pn.arcs <- arba_arc2;
		pn.arcs <- braa_arc1;
		pn.arcs <- braa_arc2;
	}
}