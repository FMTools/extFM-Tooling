/**
 */
package org.js.graph.graphtransformation.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.js.graph.graphtransformation.util.GraphtransformationAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GraphtransformationItemProviderAdapterFactory extends GraphtransformationAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GraphtransformationItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.GraphTransformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphTransformationItemProvider graphTransformationItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.GraphTransformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphTransformationAdapter() {
		if (graphTransformationItemProvider == null) {
			graphTransformationItemProvider = new GraphTransformationItemProvider(this);
		}

		return graphTransformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.LeftSide} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeftSideItemProvider leftSideItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.LeftSide}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeftSideAdapter() {
		if (leftSideItemProvider == null) {
			leftSideItemProvider = new LeftSideItemProvider(this);
		}

		return leftSideItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.InheritsFrom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InheritsFromItemProvider inheritsFromItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.InheritsFrom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInheritsFromAdapter() {
		if (inheritsFromItemProvider == null) {
			inheritsFromItemProvider = new InheritsFromItemProvider(this);
		}

		return inheritsFromItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.BelongsTo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BelongsToItemProvider belongsToItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.BelongsTo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBelongsToAdapter() {
		if (belongsToItemProvider == null) {
			belongsToItemProvider = new BelongsToItemProvider(this);
		}

		return belongsToItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.Operations} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationsItemProvider operationsItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.Operations}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationsAdapter() {
		if (operationsItemProvider == null) {
			operationsItemProvider = new OperationsItemProvider(this);
		}

		return operationsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.ActivityEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityEdgeItemProvider activityEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.ActivityEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityEdgeAdapter() {
		if (activityEdgeItemProvider == null) {
			activityEdgeItemProvider = new ActivityEdgeItemProvider(this);
		}

		return activityEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.InitialNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialNodeItemProvider initialNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.InitialNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialNodeAdapter() {
		if (initialNodeItemProvider == null) {
			initialNodeItemProvider = new InitialNodeItemProvider(this);
		}

		return initialNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.ActivityFinalNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityFinalNodeItemProvider activityFinalNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.ActivityFinalNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityFinalNodeAdapter() {
		if (activityFinalNodeItemProvider == null) {
			activityFinalNodeItemProvider = new ActivityFinalNodeItemProvider(this);
		}

		return activityFinalNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.FlowFinalNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowFinalNodeItemProvider flowFinalNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.FlowFinalNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowFinalNodeAdapter() {
		if (flowFinalNodeItemProvider == null) {
			flowFinalNodeItemProvider = new FlowFinalNodeItemProvider(this);
		}

		return flowFinalNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.ForkNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForkNodeItemProvider forkNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.ForkNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForkNodeAdapter() {
		if (forkNodeItemProvider == null) {
			forkNodeItemProvider = new ForkNodeItemProvider(this);
		}

		return forkNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.SpecializationAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecializationActionItemProvider specializationActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.SpecializationAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecializationActionAdapter() {
		if (specializationActionItemProvider == null) {
			specializationActionItemProvider = new SpecializationActionItemProvider(this);
		}

		return specializationActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.IdleAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdleActionItemProvider idleActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.IdleAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdleActionAdapter() {
		if (idleActionItemProvider == null) {
			idleActionItemProvider = new IdleActionItemProvider(this);
		}

		return idleActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.ExistingRole} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExistingRoleItemProvider existingRoleItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.ExistingRole}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExistingRoleAdapter() {
		if (existingRoleItemProvider == null) {
			existingRoleItemProvider = new ExistingRoleItemProvider(this);
		}

		return existingRoleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.ArrivingRole} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrivingRoleItemProvider arrivingRoleItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.ArrivingRole}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrivingRoleAdapter() {
		if (arrivingRoleItemProvider == null) {
			arrivingRoleItemProvider = new ArrivingRoleItemProvider(this);
		}

		return arrivingRoleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.ApplicationConditions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationConditionsItemProvider applicationConditionsItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.ApplicationConditions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationConditionsAdapter() {
		if (applicationConditionsItemProvider == null) {
			applicationConditionsItemProvider = new ApplicationConditionsItemProvider(this);
		}

		return applicationConditionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.Roles} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RolesItemProvider rolesItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.Roles}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRolesAdapter() {
		if (rolesItemProvider == null) {
			rolesItemProvider = new RolesItemProvider(this);
		}

		return rolesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.RemoveNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveNodeItemProvider removeNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.RemoveNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoveNodeAdapter() {
		if (removeNodeItemProvider == null) {
			removeNodeItemProvider = new RemoveNodeItemProvider(this);
		}

		return removeNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.AddEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddEdgeItemProvider addEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.AddEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddEdgeAdapter() {
		if (addEdgeItemProvider == null) {
			addEdgeItemProvider = new AddEdgeItemProvider(this);
		}

		return addEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.AddNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddNodeItemProvider addNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.AddNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddNodeAdapter() {
		if (addNodeItemProvider == null) {
			addNodeItemProvider = new AddNodeItemProvider(this);
		}

		return addNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.js.graph.graphtransformation.RemoveEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveEdgeItemProvider removeEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link org.js.graph.graphtransformation.RemoveEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoveEdgeAdapter() {
		if (removeEdgeItemProvider == null) {
			removeEdgeItemProvider = new RemoveEdgeItemProvider(this);
		}

		return removeEdgeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (graphTransformationItemProvider != null) graphTransformationItemProvider.dispose();
		if (ruleItemProvider != null) ruleItemProvider.dispose();
		if (leftSideItemProvider != null) leftSideItemProvider.dispose();
		if (rolesItemProvider != null) rolesItemProvider.dispose();
		if (applicationConditionsItemProvider != null) applicationConditionsItemProvider.dispose();
		if (operationsItemProvider != null) operationsItemProvider.dispose();
		if (activityEdgeItemProvider != null) activityEdgeItemProvider.dispose();
		if (existingRoleItemProvider != null) existingRoleItemProvider.dispose();
		if (arrivingRoleItemProvider != null) arrivingRoleItemProvider.dispose();
		if (initialNodeItemProvider != null) initialNodeItemProvider.dispose();
		if (activityFinalNodeItemProvider != null) activityFinalNodeItemProvider.dispose();
		if (flowFinalNodeItemProvider != null) flowFinalNodeItemProvider.dispose();
		if (forkNodeItemProvider != null) forkNodeItemProvider.dispose();
		if (specializationActionItemProvider != null) specializationActionItemProvider.dispose();
		if (idleActionItemProvider != null) idleActionItemProvider.dispose();
		if (inheritsFromItemProvider != null) inheritsFromItemProvider.dispose();
		if (belongsToItemProvider != null) belongsToItemProvider.dispose();
		if (removeNodeItemProvider != null) removeNodeItemProvider.dispose();
		if (removeEdgeItemProvider != null) removeEdgeItemProvider.dispose();
		if (addEdgeItemProvider != null) addEdgeItemProvider.dispose();
		if (addNodeItemProvider != null) addNodeItemProvider.dispose();
	}

}
